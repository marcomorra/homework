'number' + 3 + 3;
/*Відповідь: number33.
Відбулась конкатенація, тобто, до рядка додалися дві цифри (3 та 3). У даному випадку інтерпритатор розуміє,
що у нас є рядок, який він не може привести до числа, тому до рядка додаються цифри у тому вигляді, у якому є.*/

null + 3;
/*Відповідь: 3.
Інтерпритатор розуміє, що у нас є число 3 та null, яке перетворилось на 0 (особливості js), тому виконується операція
додавання.*/

5 && "qwerty";
/*Відповідь: "qwerty".
Оператор "&&" працює при умові, якщо хоча б один операнд правдивий. У нашому випадку 5 - це true та
"qwerty" - true, тому інтерпритатор відображає останнє правдиве значення.*/

+'40' + +'2' + "hillel";
/*Відповідь: "42hillel".
На перший та другий операнд впливає унарний плюс (перетворює строку на цифру), а тому 40 та 2 перетворюються
на цифри. Далі спрацьовує конкатенація, тобто додає число 42 до рядка.*/

'10' - 5 === 6;
/*Відповідь: false;
У даному випадку рядок '10' js приводить до числа, а далі працює операція віднімання, тобто 10 - 5 = 5.
У наступному кроці ми суворо порівнюємо 5 та 6. 5 не дорівнює 6, тому false.*/

true + false;
/*Відповідь: 1.
У даному випадку js приводить true та false до числа. Тому 1 + 0 дорівнює 1.*/

'4px' - 3;
/*Відповідь: NaN.
Тільки у випадку оператора "+", відбувається конкатенація. У даному випадку, js не розуміє як від рядка відняти 3,
тому відобразить результат NaN.*/

'4' - 3;
/*Відповідь: 1.
Js перетворить рядок 4 на число та віднимить від нього 1.*/

'6' + 3 ** 0;
/*Відповідь: "61".
У даному виразі ми використовуємо правоасоціативний термін. Зводимо до ступеня число 3. Згідно з правил
математики: будь яке число у нульовій степені перетворюється на 1. А далі працює правило конкатенації (до рядка
додається число).*/

12 / '6';
/*Відповідь: 2.
У даному випадку js перетворив рядок у число, а далі виконалася операція поділу.*/

'10' + (5 === 6);
/*Відповідь: "10false".
Згідно з правил математики спочатку виконуються розрахунки у дужках. 5 не дорівню 6, тобто отримуємо false.
Далі відбувається конкатенація.*/

null == '';
/*Відповідь: false.
Згідно правилам js, null є конкретним значенням відсутності об'єкта, також null це об'єкт. Отдже не являє собою число 0.
'' - це 0, тобто нічого. У даному прикладі ми перевіряємо типи, а тому тип null не дорівнює типу ''.*/

3 ** (9 / 3);
/*Відповідь: 27.
Спочатку виконуається математична операція поділ у дужках (9/3), а далі число 3 зводимо до ступеня 3.*/

!!'false' == !!'true';
/*Відповідь: true.
Стосовно !!'false': сам по собі рядок з значенням має значення true. При використанні першого знаку "!",
js перетворює true на false, а у наступний раз виконується ще раз перетворення, тому отримаємо true.
Стосовно !!'true': у першому перевторенні отримаємо false, у наступному true.*/

0 || '0' && 1;
/*Відповідь: 1.
Якщо є 2 різних оператора (|| та &&) то по пріоритету виконується обчислення '0' && 1.
У цьому випадку перший та другий операнди мають значення true, тому згідно з правил, які працюють з цим
оператором ми беремо останній з обох дійсних true, а це 1.
Стосовно виразу 0 || '0', то береться перше true, а це '0', тому що 0 - false.*/

(+null == false) < 1;
/*Відповідь: false.
Виконуємо спочатку операції у дужках. У нас є унарний плюс з null, він перетворюється на 0. 0 дорівнює false,
тому на виході ми маємо true. Js пертворить true на число та виконає порівняння числа з числом. А 1 не може
бути менше 1, тому що 1 може тільки дорівнювати 1, отдже у відповіді false.*/

false && true || true;
/*Відповідь: true.
Спочатку порівнюється false && true. Відповідь false тому, що один з варіантів містить false, а за умови повинно
бути 2 true, що у відповіді було true. Далі порівнюємо false та true. Відповідь true тому, що за умови повинен бути
хоча б один true. Тобто уся суть в різниці між операторами умов. У операторах && (i), повинні бути виконані усі умови,
а у операторі || (або), хоча б один.*/

false && (false || true);
/*Відповідь: false.
Суть така ж, як у попередньому прикладі. Тобто, спочатку виконується обчислення у дужках (хоча б одна true дає true),
а потім true порівнюється з false. А у цій частині умова спрацює, коли 2 відповіді будуть мати true. У нашому випадку
false && true дадуть у відповіді false.*/

(+null == false) < 1 ** 5;
/*Відповідь: false.
Розберемо по частинам. Виконуємо спочатку операції у дужках. У нас є унарний плюс з null, він перетворюється на 0.
0 дорівнює false, тому на виході ми маємо true. Js пертворить true на число та виконає порівняння числа з числом.
Далі зводимо 1 до ступеня 5. У відповіді отримуємо 1. А 1 не може бути менше 1, тому що 1 може тільки дорівнювати 1,
отже у відповіді false.*/
